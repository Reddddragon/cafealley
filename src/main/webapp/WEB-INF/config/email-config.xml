<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- properties값 가져오기 -->
	<context:property-placeholder
		location="classpath:/db-config/email.properties" />


	<!-- 이메일 인증 관련 빈 등록 -->
	<!-- xml파일을 따로 작성해줄 경우 web.xml에 경로를 꼭 추가해주어야 한다.(그래야 빈 등록이 된다) -->
	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<!-- 어떤 계정으로 이메일을 보낼것인지에 따라 host, port값이 바뀐다. -->
		<property name="host" value="smtp.naver.com" />
		<property name="port" value="465" />
		<!-- 실제 존재하는 계정명과 패스워드값을 적는다.
			 하지만 프로젝트나 코드 공유를 할때 정보노출 위험이 있기 때문에 때문에
			 properties 파일에 계정정보를 따로 작성하고 공유할 때는 .properties를 빼고 공유한다. -->
		<property name="username" value="${email.account}" />
		<property name="password" value="${email.password}" />

		<!-- setter메서드를 불러 -->
		<property name="javaMailProperties">
			<!-- setter메서드의 key값을 지정할 수 있음. -->
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
				<!-- javax.mail.messagingexception could not convert socket to tls 에러를 위해 추가하는 코드 -->
				<!-- 네이버의 경우 - 따로 또 메일 설정에 들어가서 POP3/IMAP 설정을 해줘야 한다.
					 지메일의 경우 - 보안설정을 해야 한다. -->
				<prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
			</props>
		</property>
	</bean>

</beans>
